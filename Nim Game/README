=============================
=      File description     =
=============================
Player.java - The Player class represents a player in the Nim game, producing Moves as a response to a Board
state. Each player is initialized with a type, either human or one of several computer strategies, which
defines the move he produces when given a board in some state. The heuristic strategy of the player is already
implemented. You are required to implement the rest of the player types according to the exercise description.

Board.java - The Board class represents a board of the Nim game. The board can be of a variable size. In this
implementation it only has 4 rows, 7 sticks in the first row, and 5,3 and 1 sticks in the following rows.
A board object is disposable, meaning that the moves performed on the board are not reversible, and if a
"clean" board is required, the user has to initialize a new board object.

Competition.java - The Competition class represents a Nim competition between two players, consisting of a
given number of rounds. It also keeps track of the number of victories of each player.

Move.java - The Move class represents a move in the Nim game by a player. A move consists of the row on which
it is applied, the left bound (inclusive) of the sequence of sticks to mark, and the right bound (inclusive)
of the same sequence.


=============================
=          Design           =
=============================
I have followed the guidance of the exercise


=============================
=  Implementation details   =
=============================
- Smart player: I build this player on the random player but he check on every turn if he can force the second
player to lose. He look if he can take all the sticks without one.


=============================
=    Answers to questions   =
=============================
No questions
